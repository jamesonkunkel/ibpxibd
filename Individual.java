/*
    Class for Individuals. Individuals have a Chromosome object and are the functional unit of the simulation. 
*/

import java.util.Random;
import java.util.stream.IntStream;
import java.util.Arrays;
import java.awt.Graphics;
import java.awt.Color;

public class Individual {
    //Chromosome object that every individual has    
    Chromosome chromosome;

    //random generator for Gaussian and uniform allelic values
    static Random generator = new Random();

    //phenotypic value of an individual, sum of allelic effects across all loci
    private int phenotype;

    //sum of QTL values
    private int geneticValue;

    //sum of neutral values
    private int geneticValueNeut;

    //X and Y coordinates in 2D space
    private double xCoord;
    private double yCoord;

    //height and width of individuals on the screen
    private int width = 10;
    private int height = 10;

    //number of offspring this individual has generated in total and as a mother
    private int offpsringCount = 0;
    private int offspringCountMat = 0;
    private int offspringCountPat = 0;

    //returns genome1
    public int[] getGenome1() {
        return chromosome.genome1;
    }

    //return genome2
    public int[] getGenome2() {
        return chromosome.genome2;
    }

    //returns length of genome
    public int getGenomeLength(){
        return this.chromosome.GENOME_LENGTH;
    }

    //returns phenotypic value of an individual
    public int getPhenotype(){
        return this.phenotype;
    }

    public int getGeneticValue(){
        return this.geneticValue;
    }

    public int getGeneticValueNeut(){
        return this.geneticValueNeut;
    }

    //returns X coordinate of individual
    public double getXCoord(){
        return this.xCoord;
    }

    //returns Y coordinate of individual
    public double getYCoord(){
        return this.yCoord;
    }

    //returns count of offspring generated by this individual
    public int getOffspringCount() {
        return this.offpsringCount;
    }

    //returns count of offspring generated by this individual as a mother
    public int getOffspringCountMat() {
        return this.offspringCountMat;
    }

    //returns count of offspring generated by this individual as a mother
    public int getOffspringCountPat() {
        return this.offspringCountPat;
    }
    
    //increments count of offspring by one
    public void incrementOffspringCount() {
        this.offpsringCount += 1;
    }

    //increments maternal count of offspring by one
    public void incrementOffspringCountMat() {
        this.offspringCountMat += 1;
    }

    //increments maternal count of offspring by one
    public void incrementOffspringCountPat() {
        this.offspringCountPat += 1;
    }

    //debugging purposes, prints out both genomes of an individual
    public void printGenomes(){
        //loop and print allelic values on genome 1
        System.out.print("Genome 1: ");
        for(int locus: this.chromosome.genome1){
            System.out.print(locus + " ");
        }

        System.out.println();

        //loop and print allelic values on genome 2
        System.out.print("Genome 2: ");
        for(int locus: this.chromosome.genome2){
            System.out.print(locus + " ");
        }

        System.out.println();
    }

    //default constructor with random allelic values in genomes
    public Individual(double maxDimX, double maxDimY){
        this.chromosome = new Chromosome();

        int[] genome1QTL = Arrays.copyOfRange(chromosome.genome1, 0, 5);
        int[] genome2QTL = Arrays.copyOfRange(chromosome.genome2, 0, 5);

        int[] genome1Neut = Arrays.copyOfRange(chromosome.genome1, 5, 10);
        int[] genome2Neut = Arrays.copyOfRange(chromosome.genome2, 5, 10);

        int genome1Sum = IntStream.of(genome1QTL).sum();
        int genome2Sum = IntStream.of(genome2QTL).sum();

        int genome1SumNeut = IntStream.of(genome1Neut).sum();
        int genome2SumNeut = IntStream.of(genome2Neut).sum();

        this.geneticValue = genome1Sum + genome2Sum;
        this.geneticValueNeut = genome1SumNeut + genome2SumNeut;

        int envDeviate = (int) (generator.nextGaussian() * 1);

        this.phenotype = this.geneticValue + envDeviate;

        this.xCoord = (Math.random() * maxDimX);
        this.yCoord = (Math.random() * maxDimY);
    }

    //constructor generates new Chromosome object with two genomes as input
    public Individual(int[] genome1, int[] genome2, double xCoord, double yCoord){
        this.chromosome = new Chromosome(genome1, genome2);

        int[] genome1QTL = Arrays.copyOfRange(chromosome.genome1, 0, 5);
        int[] genome2QTL = Arrays.copyOfRange(chromosome.genome2, 0, 5);

        int[] genome1Neut = Arrays.copyOfRange(chromosome.genome1, 5, 10);
        int[] genome2Neut = Arrays.copyOfRange(chromosome.genome2, 5, 10);

        int genome1Sum = IntStream.of(genome1QTL).sum();
        int genome2Sum = IntStream.of(genome2QTL).sum();

        int genome1SumNeut = IntStream.of(genome1Neut).sum();
        int genome2SumNeut = IntStream.of(genome2Neut).sum();

        this.geneticValue = genome1Sum + genome2Sum;
        this.geneticValueNeut = genome1SumNeut + genome2SumNeut;

        int envDeviate = (int) (generator.nextGaussian() * 1);

        this.phenotype = this.geneticValue + envDeviate;

        this.xCoord = xCoord;
        this.yCoord = yCoord;
    }

    //renders an individual to the screen with colour according to their phenotypic value
    public void paintSquare(Graphics g){

        if(this.phenotype < -15){
            g.setColor(Color.decode("#ff2d00"));
        }else if(this.phenotype >= -15 & this.phenotype < -13){
            g.setColor(Color.decode("#fb4800"));
        }else if(this.phenotype >= -13 & this.phenotype < -11){
            g.setColor(Color.decode("#f65c00"));
        }else if(this.phenotype >= -11 & this.phenotype < -9){
            g.setColor(Color.decode("#f06d00"));
        }else if(this.phenotype >= -9 & this.phenotype < -7){
            g.setColor(Color.decode("#ea7b00"));
        }else if(this.phenotype >= -7 & this.phenotype < -5){
            g.setColor(Color.decode("#e48800"));
        }else if(this.phenotype >= -5 & this.phenotype < -3){
            g.setColor(Color.decode("#dd9500"));
        }else if(this.phenotype >= -3 & this.phenotype < -1){
            g.setColor(Color.decode("#d6a000"));
        }else if(this.phenotype >= -1 & this.phenotype < 1){
            g.setColor(Color.decode("#ceaa00"));
        }else if(this.phenotype >= 1 & this.phenotype < 3){
            g.setColor(Color.decode("#c7b400"));
        }else if(this.phenotype >= 3 & this.phenotype < 5){
            g.setColor(Color.decode("#c0be11"));
        }else if(this.phenotype >= 5 & this.phenotype < 7){
            g.setColor(Color.decode("#b8c62c"));
        }else if(this.phenotype >= 7 & this.phenotype < 9){
            g.setColor(Color.decode("#b1cf40"));
        }else if(this.phenotype >= 9 & this.phenotype < 11){
            g.setColor(Color.decode("#aad753"));
        }else if(this.phenotype >= 11 & this.phenotype < 13){
            g.setColor(Color.decode("#a3df65"));
        }else if(this.phenotype >= 13 & this.phenotype < 15){
            g.setColor(Color.decode("#9ce677"));
        }else if(this.phenotype >= 15){
            g.setColor(Color.decode("#96ed89"));
        }

        g.fillRect(((int) xCoord) * 10, ((int) yCoord) * 10, width, height);
        g.setColor(Color.BLACK);
        g.drawRect(((int) xCoord * 10), ((int) yCoord) * 10, width, height);  
    }
}
